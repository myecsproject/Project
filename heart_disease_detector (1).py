# -*- coding: utf-8 -*-
"""Heart Disease Detector.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VPvK1GvjI_-TsVaYzedvyM24aOrK_3wv

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression   #Importing the regression model
from sklearn.metrics import accuracy_score            #accuracy score checks how well model is performing
import warnings

# loading the csv data to a Pandas DataFrame {DataFrame is data structure used to tabular data in python}
heart_data = pd.read_csv('/content/sample_data/heart.csv')

#printing first 5 rows of the dataset
# heart_data.head()

#printing the last five row
heart_data.tail()

#number of rows and columns in the data set
heart_data.shape

#getting more information about the data
# null -> missing values; Dtype-> represents the data type like int64 =>int 64 bytes
heart_data.info()

#checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
#the % you its percentile tells us x% of the data is less than y for example 25% means 25 percentage in data is less than 48
heart_data.describe()

# finding the number of people who have the heart disease
#data_Set['column-name'].value_counts()
heart_data['target'].value_counts()

"""1--> Defective heart

0 --> Normal heart

Note: The values of 1 and 0 are nearly same hence we don't need to do extra processing
"""

# splitng the features and target (segregation target and other columns apart)
X = heart_data.drop(columns='target', axis = 1);      # X has all the feauters column axis = 1 for colums and 0 for rows
Y = heart_data['target']

print(X)

print(Y)

"""Spliting the data into training data and test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, stratify=Y, random_state= 2)

print(X.shape, X_train.shape, X_test.shape)

"""Model training

Regression model is best for binary classification
"""

model = LogisticRegression()

#training the logisticregression model with training data
model.fit(X_train,Y_train)
#.fit() will simply find the pattern between X_train and Y_train to get trainned

"""Model Evaluation

Accuracy Score
"""

#accuracy on training data
X_train_predicition = model.predict(X_train)
#Here our model will simply store the target which it learned from the training data and later we will compare these values with Y_train for score
training_data_accuracy = accuracy_score(X_train_predicition,Y_train)

print('Accuracy on Training data: ',training_data_accuracy)

#Accuracy Score on test data
X_test_predicition = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_predicition,Y_test)
print('Accuracy on Test data: ',test_data_accuracy)

"""Building the predictive system"""

#Getting the inputs
input_data= (135.0,0.30,160.0,138)

#Change the input data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)
#Reshape the array -> Telling the model that we are trying to find the value for only one person
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
#Finding the predicition for the particular instance
prediction = model.predict(input_data_reshaped)

print(prediction)
#used [0] because output is a list with 1 value only aka 0 index
if(prediction[0] == 0):
    print("You don't have heart disease.")
else:
    print("You have heart disease.")
warnings.filterwarnings("ignore", category=UserWarning)